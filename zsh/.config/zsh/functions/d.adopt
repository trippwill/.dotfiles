#! /usr/bin/env zsh

function d.adopt() {
  local package=""
  local file=""
  local confirm="false"
  local dotfiles_dir=${DOTFILES_DIR:-$HOME/.dotfiles}

  # Parse arguments
  while [[ "$#" -gt 0 ]]; do
    case "$1" in
      --confirm)
        confirm="true"
        shift
        ;;
      *)
        if [[ -z "$package" ]]; then
          package="$1"
        elif [[ -z "$file" ]]; then
          file="$1"
        else
          echo "Error: Unexpected argument '$1'."
          return 1
        fi
        shift
        ;;
    esac
  done

  # file and package are required
  if [[ -z "$file" || -z "$package" ]]; then
    echo "Error: Both 'file' and 'package' arguments are required."
    return 1
  fi

  # if file does not exist return with message
  if [[ ! -e "$file" ]]; then
    echo "Error: '$file' does not exist, not adopting."
    return 1
  fi

  # if file is a symlink return with message
  if [[ -L "$file" ]]; then
    echo "Error: '$file' is a symlink, not adopting."
    return 1
  fi

  # if file is a directory return with message
  if [[ -d "$file" ]]; then
    echo "Error: '$file' is a directory, not adopting."
    return 1
  fi

  # if files full path is under dotfiles_dir return with message
  if [[ "$file" == "$dotfiles_dir"* ]]; then
    echo "Error: '$file' is under '$dotfiles_dir', not adopting."
    return 1
  fi

  # if package directory does not exist print a notice that it will be created
  if [[ ! -d "$dotfiles_dir/$package" ]]; then
    echo "package $dotfiles_dir/$package does not exist, creating it..."
    mkdir -vp "$dotfiles_dir/$package"
  fi

  local target_path
  target_path="$dotfiles_dir/$package/$(realpath --relative-to="$HOME" "$file" 2>/dev/null)"
  if [[ $? -ne 0 ]]; then
    echo "Error: Failed to resolve the relative path for '$file'."
    return 1
  fi
  local target_dir=$(dirname "$target_path")

  # if target_dir does not exist, print a notice that it will be created
  if [[ ! -d "$target_dir" ]]; then
    echo "$target_dir does not exist, creating it..."
    mkdir -vp "$target_dir"
  fi

  # if target_path does not exist, print a notice that it will be created
  if [[ ! -f "$target_path" ]]; then
    echo "$target_path does not exist, creating it..."
    touch "$target_path"
  fi

  # adopt the package (simulate if confirm is not true)
  if [[ "$confirm" == "true" ]]; then
    stow -d "$dotfiles_dir" -t "$HOME" -v --adopt "$package"
  else
    stow -d "$dotfiles_dir" -t "$HOME" -nv --adopt "$package"
  fi
}
